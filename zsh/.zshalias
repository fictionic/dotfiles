# CONFIGURE EXPANDABLE ALIASES
typeset -a ealiases
ealiases=()
function ealias() {
	alias $1
	ealiases+=(${1%%\=*})
}
function expand-ealias() {
	if [[ $LBUFFER =~ "(^|[;|&])\s*(${(j:|:)ealiases})\$" ]]; then
		zle _expand_alias
		zle expand-word
	fi
	zle magic-space
}
zle -N expand-ealias
bindkey -M viins ' '    expand-ealias
bindkey -M viins '^ '   magic-space # control-space to bypass completion
bindkey -M isearch " "  magic-space # normal space during searches

###############
# SET ALIASES #
###############

#####
# (1) adjustments

# let sudo take aliases as arguments
alias sudo='sudo '
# dunno why I have this
alias 'sudo vim'='sudo -e'

# make ls use colors, and get easy access to common arguments
alias ls='ls -HNFv --group-directories-first --color=auto'
alias ll='ls -l '
alias la='ls -a '

# make "help" work as expected
alias help=run-help

# better pgrep
alias pgrep='ps -ef | head -1; ps -ef | rg'

# use rg instead of ack/the_silver_searcher
alias ack='rg'
alias ag='rg'

# use vim keybindings in info
alias info='info --vi-keys '

# load math.h in bc
alias bc='bc -l'

# ----------------------------- (2) ABBREVIATIONS -----------------------------

# transmission-remote
alias to=transmission-remote

# open a file
alias open=rifle

# update system
alias upd='pikaur -Syu --devel --needed --keepbuild; echo "Checking for orphan packages..."; pacclean'

# ping google
alias pingg='ping google.com'

# list all packages by reverse intall date
alias paclist="expac --timefmt='%F %T' '%l %w %n' | grep explicit | cut -d ' ' -f 1-2,4- | sort -n"

# enable hdmi output
alias hdmi='xrandr --output HDMI2 --mode 1920x1080'

# easy access to vimrc and vimplugins
alias vimrc='vim $HOME/.vimrc'
alias vimplugins='vim $HOME/.vimplugins'

# get dynamic range of currently playing song
dr() {
	dr14_tmeter -f "$1" 2>/dev/null | tail -3
}
alias drmpd='dr ~/audio/library/hi-res/"$(mpc -f %file% current)"'
# get standard loudness of a track or album
ealias bs='bs1770gain '
alias bsmpd='bs1770gain "$(mpd-current.sh)" | awk '\''/integrated/ { print $2; exit }'\'

# demlo
ealias dl='demlo'

# demloplus add symlink
ealias das='demloplus add symlink '

# avoid typos
alias ragner=ranger
alias l='ls '
alias s='ls '

# git stuff
ealias gs='git status'
ealias ga='git add'
ealias gb='git branch'
ealias gc='git commit -m'
ealias gca='git commit -am'
ealias gl='git log'
ealias gp='git push'
ealias gP='git pull'
ealias gd='git diff'
ealias gds='git diff --staged'
ealias gr='git reset'
ealias gh='git checkout'
ealias gm='git merge'
ealias gpo='git push origin $(git rev-parse --abbrev-ref HEAD)'
ealias gfm='git fetch origin master:master'
ealias gfsm='git fetch origin stable-master:stable-master'

# traverse forward through git branch history
ghf() {
	to="$*"
	if [[ "$to" == "" ]]; then
		to=master
	fi
	git checkout $(git rev-list --topo-order HEAD.."$to" | tail -1)
}

# traverse backward through git branch history
ghb() {
	git checkout 'HEAD~'
}

# pacman -Q shortcuts
ealias pqi="pacman -Qi"
ealias pqo="pacman -Qo"
ealias pql="pacman -Ql"

# cd to directory of current mpd song
alias cdmpd='cd "$(dirname "$(mpd-current.sh)")"'

# more robust uniqueness filter
alias unique=$'awk \'!a[$0]++\''

# ------------------------ (3) STANDALONE FUNCTIONALITY -----------------------

# find using ripgrep
rgf() {
	rg --files | rg "$@"
}

# expanded cd -- go to directory or parent directory of file, depending
cdf() {
	if [[ "#$" == 0 ]]; then
		exit
	fi
	if [[ -d "$1" ]]; then
		cd "$1"
	else
		cd "$(dirname "$1")"
	fi
}

# find which package provides an executable
has() {
	local pkgs already cmd="$1"
	# first check if we already have it
	already="$(pacman -Qo "$cmd" 2>/dev/null)"
	if [[ -n "$already" ]]; then
		printf "$already\n"
		return 0
	fi
	# then check what nonlocal packages provide it
	pkgs=(${(f)"$(pkgfile -b -v -- "$cmd" 2>/dev/null)"})
	if [[ -n "$pkgs" ]]; then
		printf '%s may be found in the following packages:\n' "$cmd"
		printf '  %s\n' $pkgs[@]
		return 0
	fi
	printf "$0"': no package provides this binary: %s\n' "$cmd" 1>&2
	return 127
}

# find which package owns a file
alias owns='pacman -Qo '

# remove orphan packages
pacclean() {
	toremove=($(pikaur -Qqdt))
	if [[ ${#toremove[@]} == 0 ]]; then
		echo "Package database clean."
	else
		pikaur -Rs "${toremove[@]}"
	fi
}

# use vim ex commands in a UNIX pipe
vp() {
	vim - -u NONE -es '+1' "+$*" '+%print' '+:qa!' | tail -n +2
}

# use vim normal mode commands in a UNIX pipe
vn() {
	vim - -u NONE -es '+1' "+normal $*" '+%print' '+:qa!' | tail -n +2
}

# compute human-readable filesize of a given file
size() {
	if [[ -a "$1" ]]; then
		if [[ -d "$1" ]]; then
			du -h -d0 "$1" | cut -d'	' -f1
		else
			numfmt --to=iec-i --suffix=B --format="%.3f" "$(stat -c %s $1)"
		fi
	else
		echo "size: cannot stat '$1': No such file or directory"
	fi
}

# filter stdin to a given line efficiently
lineno() {
	awk "FNR == $1 { print; exit }"
}

# filter out non-curse words from stdin
curses() {
	words=( $(</usr/share/dict/curses) )
	re="(${words[1]}";
	for i in {2.."${#words}"}; do
		re="${re}|${words[$i]}"
	done
	re="$re)"
	rg -w "${re}" "$@"
}

# compute the checksum of the raw audio stream of a file
audiochecksum() {
	tmpfile="$(mktemp --suffix=.raw)"
	ffmpeg -y 2>/dev/null -i "$1" -f wav "$tmpfile"
	md5sum -b "$tmpfile" | cut -d ' ' -f 1
	rm "$tmpfile"
}

# vim help
vimhelp() {
	vim -c ":h $1 | only"
}

##### widgets
# Alt-G to quickly change branches
git-go-widget() {
	echo "gitgo..."
	git rev-parse --is-inside-work-tree | read GIT_ERROR;
	if [[ $pipestatus[1] == 128 ]]; then
		echo "$GIT_ERROR"
		zle reset-prompt;
		return;
	fi
	if [[ "$(git rev-parse --abbrev-ref @)" == 'HEAD' ]]; then
		echo "...not on a branch\n";
		zle reset-prompt;
		return;
	fi
	git for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(refname:short)' | fzf --no-sort | sed 's/^\* //' | read BRANCH;
	if [[ -z $BRANCH ]]; then
		echo "...aborting\n"
		zle reset-prompt;
		return;
	fi
	echo "checking out $BRANCH..."
	git checkout "$BRANCH"
	zle reset-prompt;
}
zle -N git-go-widget
bindkey '\eg' git-go-widget

### redfin stuff
# psql aliases
alias sfperf='psql -U redfin_readwrite -h sfperf-query-1.redfintest.com stingray_sfperf'
alias newschema='psql -U postgres -h ns-query-1.redfintest.com stingray_new_schema'
alias release='psql -U redfin_readwrite -h release-query-1.redfintest.com stingray_release'
alias trunk='psql -U redfin_readwrite -h trunk-query-1.redfintest.com stingray_trunk'
alias prod='psql -U dylan.forbes -h analytics-2.redfintest.com stingray_prod'
alias redshift='psql -h 10.0.7.23 -d rmus_prod -p 5439 -U dylan.forbes'

redvim() {
	cur_branch="$(git rev-parse --abbrev-ref HEAD)"
	if [[ $? != 0 ]]; then
		return $?
	fi
    if [[ $cur_branch == HEAD ]]; then
        print "Not on a branch!"
		return
    fi
    session_file="$HOME/code/VIM/$cur_branch"
    if [[ -f $session_file ]]; then
        vim -S "$session_file"
    else
        vim -c "Obsess $session_file"
    fi
}

# corvair stuff
ealias cwl='corvair --check --watch --lazy customer-pages'
ealias cnb='corvair --nuke'
ealias cnh='corvair --nuke-hard'
ealias cnf='bazel run js.enumgenerator:JSEnumSerializerMain ~/code/main/redfin.npm/redfin-enums/'
# git stuff
ealias gpo='git push origin $(git rev-parse --abbrev-ref HEAD)'
alias gpox=$'git push origin $(git rev-parse --abbrev-ref HEAD) 2>&1 | tee /dev/fd/2 | awk \'/remote:   https:/ { print $2 }\' | xargs google-chrome 2>/dev/null'

ealias cm='cd ~/code/main'

# saucelabs tunnel
alias sc=$'sc -u sso-redfin-dylan.forbes -k 3ea9fee2-036c-42c6-8d6b-a60593094c90 -B \'*.redfintest.com\' -i "$(hostname)-tunnel"'
