" vim: filetype=vim
"-------------"
"   PLUGINS   "
"-------------"

" add package 'matchit' -- enhanced % behavior
packadd! matchit

call plug#begin()

Plug 'junegunn/vim-plug'
nmap <leader>pi :PlugInstall<CR>
nmap <leader>pu :PlugUpdate<CR>
nmap <leader>pc :PlugClean<CR>

" ------------------------------- BIGGISH THINGS ------------------------------

Plug 'vim-airline/vim-airline' " statusline
" " Enable the list of buffers
" let g:airline#extensions#tabline#enabled = 1
" " Show just the filename
" let g:airline#extensions#tabline#fnamemod = ':t'

Plug 'w0rp/ale' " asynchronous lint engine
" disable javac b/c ale can't figure out classpaths
let g:ale_linters = {
\	'java': []
\}
nmap <leader>at :ALEToggle<CR>
nmap <leader>an :ALENext<CR>
nmap <leader>aN :ALEPrevious<CR>
nmap <leader>ar :ALEReset<CR>
" ignore these 'errors' in flake8
let g:ale_python_flake8_args="--ignore="
let g:ale_python_flake8_args.="E226," " missing whitespace around arithmetic operator
let g:ale_python_flake8_args.="E301," " expected 1 blank line, found 0
let g:ale_python_flake8_args.="E302," " expected 2 blank lines, found 0
let g:ale_python_flake8_args.="E305," " expected 2 blank lines after end of function or class
let g:ale_python_flake8_args.="E306," " expected 1 blank line before a nested definition, found 0
let g:ale_python_flake8_args.="E401," " multiple imports on one line
let g:ale_python_flake8_args.="E501" " line too long (>79 characters)

Plug 'junegunn/fzf.vim' " fzf integration
nnoremap <C-p> :Files<CR>
nnoremap <C-j> :Buffers<CR>
command! -bang -nargs=* Find 
      \ call fzf#vim#grep('rg --column --line-number --no-heading --smart-case --no-follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

Plug 'tpope/vim-fugitive' " tim pope's git plugin

Plug 'mbbill/undotree' " undo tree visualizer
nnoremap <silent> <leader>ut :UndotreeToggle<CR>

Plug 'ludovicchabant/vim-gutentags' " automatic tags configuration
let g:gutentags_file_list_command = 'rg --files'
let g:gutentags_ctags_tagfile='exuberanttags'

Plug 'fictionic/VimCompletesMe' " completion
let g:vcm_direction = 'p'

Plug 'tpope/vim-obsession' " session management

" --------------------------- FOR SPECIFIC LANGUAGES --------------------------

Plug 'lervag/vimtex' " for latex

" Plug 'davidhalter/jedi-vim' " omnicomplete for python
" let g:jedi#auto_vim_configuration = 0
" let g:jedi#auto_initialization = 0
" let g:jedi#goto_command = ""
" let g:jedi#goto_assignments_command = ""

" ---------------------------- COMMANDS / OPERATORS ---------------------------

Plug 'tpope/vim-repeat' " let supported plugins use .

Plug 'nhooyr/UnconditionalPaste' " more controlled paste operations

Plug 'tomtom/tcomment_vim' " comment operators (more powerful than tpope/vim-commentary, I think)

Plug 'godlygeek/tabular' " provides :Tabularize command

Plug 'tpope/vim-surround' " easily deal with delimiters (ds, cs, ys)
nmap dsq ds"
nmap dsQ ds'
nmap csq cs"
nmap csQ cs'

Plug 'tpope/vim-unimpaired' " many pairs of operators/commands

Plug 'tpope/vim-abolish' " Abolish, Subvert, and Coerce

Plug 'guywald1/vim-prismo' " pretty comment section titles
nmap <leader>pr :Prismo<CR>
let g:prismo_dash = '-' " the character to pad the title (dash by default)
let g:prismo_ruler = 80 " the rightmost edge to span your title
let g:prismo_toupper = 1 " whether to transform the title to uppercase

Plug 'tpope/vim-characterize' " better info from `ga` command

Plug 'tpope/vim-speeddating' " smarter <C-A>/<C-X> for dates/times

Plug 'christoomey/vim-titlecase' " gt = titlecase operator
let g:titlecase_map_keys = 0
nmap gt <Plug>Titlecase
vmap gt <Plug>Titlecase
nmap gtt <Plug>TitlecaseLine
nmap gtgt <Plug>TitlecaseLine

Plug 'AndrewRadev/splitjoin.vim' " gS/gJ = split/join langauge constructs

Plug 'moll/vim-bbye' " better :bdelete/:bwipeout
nmap <leader>bd :Bdelete<CR>

" ---------------------------------- MOTIONS ----------------------------------

Plug 'justinmk/vim-sneak' " like f, but with two characters
nmap <leader>s <Plug>Sneak_s
xmap <leader>s <Plug>Sneak_s
omap <leader>s <Plug>Sneak_s
nmap <leader>S <Plug>Sneak_S
xmap <leader>S <Plug>Sneak_S
omap <leader>S <Plug>Sneak_S

Plug 'justinmk/vim-ipmotion' " improves { and } motions

Plug 'chaoren/vim-wordmotion' " enhanced word movements (snake_case, camelCase, acronyms, etc)
let g:wordmotion_prefix = "\\"

Plug 'haya14busa/incsearch.vim' " better than builtin incsearch
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
let g:incsearch#do_not_save_error_message_history = 1
" highlight matches before curor differently than those after cursor
" (doesn't work anymore for some reason)
let g:incsearch#separate_highlight = 1
highlight IncSearchCursor ctermfg=0 ctermbg=9 guifg=#000000 guibg=#FF0000

Plug 'danielroseman/pygd-vim' " improved gd motion for python

Plug 'jeetsukumaran/vim-indentwise' " indentwise motions

" -------------------------------- TEXT OBJECTS -------------------------------

Plug 'wellle/targets.vim' " adds tons of text objects
let g:targets_pairs = '()b {}B []r <>a'
let g:targets_quotes = '"q ''Q `'
let g:targets_argTrigger = 'g'

Plug 'kana/vim-textobj-user' " plugin to allow one to create custom text objects

Plug 'kana/vim-textobj-entire' " adds 'entire file' text objects (ae and ie)

Plug 'kana/vim-textobj-indent' " adds text object for lines with matching indent (ii and ai)
omap Ai aI
vmap Ai aI
omap Ii iI
vmap Ii iI

Plug 'glts/vim-textobj-comment' " adds comment text objects (ac and ic)

Plug 'reedes/vim-textobj-sentence' " improved sentence detection (also comes with motions)

Plug 'rbonvall/vim-textobj-latex' " text objects for latex
" TODO: make it so ^these mappings aren't overwriten by targets/vimtex when latex is detected

" ------------------------------ SMALLISH THINGS ------------------------------

"Plug 'tpope/vim-sensible' " sensible defaults

Plug 'editorconfig/editorconfig-vim' " editorconfig

Plug 'google/vim-searchindex' " display index of search result using / or ?

Plug 'tpope/vim-sleuth' " intelligently and automatically detect indentation settings

" Plug 'AssailantLF/vim-active-numbers' " only show line numbers in the active window

Plug 'Valloric/MatchTagAlways' " match xml tag pairs
nnoremap <leader>% :MtaJumpToOtherTag<CR>

Plug 'tpope/vim-capslock' " software capslock (imap <C-G>c; nmap gC)

Plug 'danro/rename.vim' " rename current file

call plug#end()
