" vim: filetype=vim
"-------------"
"   PLUGINS   "
"-------------"

" add package 'matchit' -- enhanced % behavior
packadd! matchit

call plug#begin()

Plug 'junegunn/vim-plug'
" ------------------------------- BIGGISH THINGS ------------------------------
Plug 'vim-airline/vim-airline' " statusline
Plug 'w0rp/ale' " asynchronous lint engine
Plug 'junegunn/fzf.vim' " fzf integration
Plug 'tpope/vim-fugitive' " tim pope's git plugin
Plug 'mbbill/undotree' " undo tree visualizer
" --------------------------- FOR SPECIFIC LANGUAGES --------------------------
Plug 'lervag/vimtex' " for latex
" ---------------------------- COMMANDS / OPERATORS ---------------------------
Plug 'tomtom/tcomment_vim' " comment operators (more powerful than tpope/vim-commentary, I think)
Plug 'godlygeek/tabular' " provides :Tabularize command
Plug 'tpope/vim-surround' " easily deal with delimiters (ds, cs, ys)
Plug 'tpope/vim-unimpaired' " many pairs of operators/commands
Plug 'tpope/vim-abolish' " Abolish, Subvert, and Coerce
Plug 'guywald1/vim-prismo' " pretty comment section titles
Plug 'tpope/vim-characterize' " better info from `ga` command
Plug 'tpope/vim-speeddating' " smarter <C-A>/<C-X> for dates/times
Plug 'christoomey/vim-titlecase' " gt = titlecase operator
" ---------------------------------- MOTIONS ----------------------------------
Plug 'justinmk/vim-sneak' " like f, but with two characters
Plug 'justinmk/vim-ipmotion' " improves { and } motions
Plug 'chaoren/vim-wordmotion' " enhanced word movements (snake_case, camelCase, acronyms, etc)
Plug 'haya14busa/incsearch.vim' " better than builtin incsearch
Plug 'danielroseman/pygd-vim' " improved gd motion
" -------------------------------- TEXT OBJECTS -------------------------------
Plug 'wellle/targets.vim' " adds tons of text objects
Plug 'kana/vim-textobj-user' " plugin to allow one to create custom text objects
Plug 'kana/vim-textobj-entire' " adds 'entire file' text objects (ae and ie)
Plug 'kana/vim-textobj-indent' " adds text object for lines with matching indent (ii and ai)
Plug 'glts/vim-textobj-comment' " adds comment text objects (ac and ic)
Plug 'reedes/vim-textobj-sentence' " improved sentence detection (also comes with motions)
Plug 'rbonvall/vim-textobj-latex' " text objects for latex
" TODO: make it so ^these mappings aren't overwriten by targets/vimtex when latex is detected
" ------------------------------ SMALLISH THINGS ------------------------------
"Plug 'tpope/vim-sensible' " sensible defaults
Plug 'tpope/vim-repeat' " let supported plugins use .
Plug 'editorconfig/editorconfig-vim' " editorconfig
Plug 'google/vim-searchindex' " display index of search result using / or ?
Plug 'tpope/vim-sleuth' " intelligently and automatically detect indentation settings
Plug 'ervandew/supertab' " insert mode tab completion
Plug 'AssailantLF/vim-active-numbers' " only show line numbers in the active window
Plug 'Valloric/MatchTagAlways' " match xml tag pairs
Plug 'tpope/vim-capslock' " software capslock (imap <C-G>c; nmap gC)
call plug#end()

" -------------------------- PLUGIN-RELATED SETTINGS --------------------------

" vim-plug
nmap <leader>pi :PlugInstall<CR>
nmap <leader>pu :PlugUpdate<CR>
nmap <leader>pc :PlugClean<CR>

" undotree
nnoremap <silent> <leader>ut :UndotreeToggle<CR>

" vim-prismo
nmap <leader>pr :Prismo<CR>
let g:prismo_dash = '-' " the character to pad the title (dash by default)
let g:prismo_ruler = 80 " the rightmost edge to span your title
let g:prismo_toupper = 1 " whether to transform the title to uppercase

" ALE
nmap <leader>an :ALENext<CR>
" ignore these 'errors' in flake8
let g:ale_python_flake8_args="--ignore="
let g:ale_python_flake8_args.="E226," " missing whitespace around arithmetic operator
let g:ale_python_flake8_args.="E301," " expected 1 blank line, found 0
let g:ale_python_flake8_args.="E302," " expected 2 blank lines, found 0
let g:ale_python_flake8_args.="E305," " expected 2 blank lines after end of function or class
let g:ale_python_flake8_args.="E306," " expected 1 blank line before a nested definition, found 0
let g:ale_python_flake8_args.="E401," " multiple imports on one line
let g:ale_python_flake8_args.="E501" " line too long (>79 characters)

" vim-titlecase
let g:titlecase_map_keys = 0
nmap gt <Plug>Titlecase
vmap gt <Plug>Titlecase
nmap gtt <Plug>TitlecaseLine
nmap gtgt <Plug>TitlecaseLine

" targets.vim
let g:targets_quotes = '"q ''Q `'

" vim-surround
nmap dsq ds"
nmap dsQ ds'
nmap csq cs"
nmap csQ cs'

" vim-sneak
nmap <leader>s <Plug>Sneak_s
xmap <leader>s <Plug>Sneak_s
omap <leader>s <Plug>Sneak_s
nmap <leader>S <Plug>Sneak_S
xmap <leader>S <Plug>Sneak_S
omap <leader>S <Plug>Sneak_S

" vim-textobj-indent
omap Ai aI
vmap Ai aI
omap Ii iI
vmap Ii iI

" vim-wordmotion
let g:wordmotion_prefix = "\\"

" vim-airline
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" fzf
nnoremap <C-p> :Files<CR>

" incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
let g:incsearch#do_not_save_error_message_history = 1
" highlight matches before curor differently than those after cursor
" (doesn't work anymore for some reason)
let g:incsearch#separate_highlight = 1
highlight IncSearchCursor ctermfg=0 ctermbg=9 guifg=#000000 guibg=#FF0000

" MatchTagAlways
nnoremap <leader>% :MtaJumpToOtherTag<CR>
